node {
    def WORKSPACE = "/var/lib/jenkins/workspace/todo-management-for-mavenrepo"
    def buildNumber = env.BUILD_NUMBER ?: '0'
    def dockerImageTag = "rinkuls/todo-management-for-mavenrepo:${buildNumber}"

    try {
        // Stage to clone the repository
        stage('Clone Repo') {
            git url: 'https://github.com/rinkuls/todo-management-for-mavenrepo.git',
                credentialsId: 'springdeploy-user',
                branch: 'main'
        }

        // Build the application
        stage('Build') {
            bat "mvn clean install"
        }

        // Build Docker image
        stage('Build Docker Image') {
            echo "Building Docker image with tag: ${dockerImageTag}"

            // Build the Docker image
            def dockerImage = docker.build(dockerImageTag)

            // Verify the image is built correctly
            echo "Docker Image built successfully: ${dockerImageTag}"
        }

        // Push Docker Image to Docker Hub
        stage('Push Docker Image to Docker Hub') {
            withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials-id', passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USERNAME')]) {
              bat '''
                  docker login -u %DOCKER_HUB_USERNAME% -p %DOCKER_HUB_PASSWORD%
              '''


                // Push Docker image to Docker Hub
                bat  "docker push ${dockerImageTag}"
            }
        }

        // Deploy to Kubernetes (Minikube)
stage('Deploy to Minikube') {
            echo "Deploying to Kubernetes with Docker Hub image: ${dockerImageTag}"
            bat 'kubectl config use-context minikube'

            // Log before replacement
            bat 'type app-deployment.yaml'

            // Replace the image tag
           // bat "powershell -Command \"(Get-Content app-deployment.yaml) -replace 'rinkuls/todo-management-for-mavenrepo:latest', 'rinkuls/todo-management-for-mavenrepo:${buildNumber}' | Set-Content app-deployment.yaml\""
            bat "powershell -Command \"(Get-Content app-deployment.yaml) -replace '\\\$\\{BUILD_NUMBER\\}', '${env.BUILD_NUMBER}' | Set-Content app-deployment.yaml\""

            // Log after replacement
            bat 'type app-deployment.yaml'

            // Apply the deployment
            bat 'kubectl apply -f app-deployment.yaml'
            bat 'kubectl apply -f app-service.yaml'

            // Check pod status
            bat 'kubectl get pods'
            bat 'kubectl describe deployment <your-deployment-name>'
        }

        echo 'Deployment to Minikube was successful!'
    } catch (e) {
        echo "Error occurred: ${e.message}"
        currentBuild.result = "FAILED"
        notifyBuild(currentBuild.result)
        throw e
    } finally {
        echo "in finally"
    }
}

// Email notification function
def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus = buildStatus ?: 'SUCCESSFUL'
    def now = new Date()
    def subject = "${buildStatus}, Job: ${env.JOB_NAME} FRONTEND - Deployment Sequence: [${env.BUILD_NUMBER}] "
    def subject_email = "Spring Boot Deployment"
    def details = """<p>${buildStatus} JOB </p>
    <p>Job: ${env.JOB_NAME} - Deployment Sequence: [${env.BUILD_NUMBER}] - Time: ${now}</p>
    <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME}</a>"</p>"""

    // Email notification
    emailext(
        to: "rinkulsharma123@gmail.com",
        subject: subject_email,
        body: details,
    )
}
